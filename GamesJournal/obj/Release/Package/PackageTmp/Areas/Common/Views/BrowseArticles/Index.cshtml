@model IEnumerable<BOL.article>
@using PagedList.Mvc;

@{
    ViewBag.Title = "Index";
}

<script>
    document.addEventListener("DOMContentLoaded", function () {
        "use strict"

        var style = ""
          + "<style>"
          + "input.animated-search-filter {"
          + "-webkit-tap-highlight-color: transparent;"
          + "}"
          + ".animated-search-filter .hidden {"
          + "opacity: 0;"
          + "pointer-events: none;"
          + "}"
          + ".animated-search-filter > * {"
          + "position: absolute;"
          + "transition: .5s;"
          + "}"
          + "</style>"

        document.head.insertAdjacentHTML("beforeend", style)

        var items = document.querySelectorAll(".animated-search-filter > *")
        var itemHeight = items[0].offsetHeight
        var texts = []
        var i = -1
        var len = items.length
        var transform = "transform" in document.body.style ? "transform" : "webkitTransform"

        while (++i < len) {
            texts.push(items[i].textContent.trim())
            items[i].style[transform] = "translateY(" + i * itemHeight + "px)"
        }

        document.querySelector("input.animated-search-filter").addEventListener("input", function () {
            var re = new RegExp(this.value, "i")
            texts.forEach(function (element, index) {
                if (re.test(element)) {
                    items[index].classList.remove("hidden")
                }
                else {
                    items[index].classList.add("hidden")
                }
                var i = -1
                var position = 0
                while (++i < len) {
                    if (items[i].className != "hidden") {
                        items[i].style[transform] = "translateY(" + position++ * itemHeight + "px)"
                    }
                }
            })
        })
    })
</script>

<style>
    .animated-search-filter {
    display: table-row;
    vertical-align: inherit;
    border-color: inherit;
    }
</style>


<h2>Articles On Games Journal</h2>
<div class="pull-right">
    <div class="btn-group ">
        <button type="button" class="btn btn-primary">Export To</button>
        <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown"><span class="caret"></span></button>
        <ul class="dropdown-menu">
            <li>@Html.ActionLink("Excel", "ExportTo", new { ReportType = "Excel" })</li>
            <li>@Html.ActionLink("PDF", "ExportTo", new { ReportType = "PDF" })</li>
            <li>@Html.ActionLink("Word", "ExportTo", new { ReportType = "Word" })</li>
        </ul>
    </div>
</div>
@*<p>
    @Html.ActionLink("Add Article", "Create")
</p>*@

@using (Html.BeginForm("Index", "BrowseArticles", FormMethod.Get))
{
<p>
    Match Title | Content | Author | Category | : @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
    <input type="submit" value="Search" />
</p>
  
@*<p>
Select Department: @Html.DropDownList("Wanted2SearchBy", "All")
 Find By @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
<input type="submit" value="Filter" />
</p>*@

    <legend>Articles By Category</legend>
    @Html.DropDownList("filterString", "Select a Category")  
    <input type="submit" value="Filter" />
}

    

<table class="table table-responsive table-bordered table-striped table-hover">


    <tr class="info">
        <th>
            @Html.ActionLink("Article_Title", "Index", new { SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), SortBy = "title", page = (ViewBag.Page == null ? "1" : ViewBag.Page), currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Content", "Index", new { SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), SortBy = "content", page = (ViewBag.Page == null ? "1" : ViewBag.Page), currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("# of Views", "Index", new { SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), SortBy = "title", page = (ViewBag.Page == null ? "1" : ViewBag.Page), currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Rating", "Index", new { SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), SortBy = "rating", page = (ViewBag.Page == null ? "1" : ViewBag.Page), currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Link", "Index", new { SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), SortBy = "title", page = (ViewBag.Page == null ? "1" : ViewBag.Page), currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Date & Time", "Index", new { SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), SortBy = "Date&Time", page = (ViewBag.Page == null ? "1" : ViewBag.Page), currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Author", "Index", new { SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), SortBy = "author", page = (ViewBag.Page == null ? "1" : ViewBag.Page), currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Author Role", "Index", new { SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), SortBy = "author", page = (ViewBag.Page == null ? "1" : ViewBag.Page), currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Category", "Index", new { SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), SortBy = "category", page = (ViewBag.Page == null ? "1" : ViewBag.Page), currentFilter = ViewBag.CurrentFilter })
        </th>

        @if (User.IsInRole(BOL.userTypesEn.ChiefEditorStr) || User.IsInRole(BOL.userTypesEn.EditorStr))
        { 
          <th>Update</th>
          <th>Remove</th>
        }
        <th>Description</th>
        @if (User.IsInRole(BOL.userTypesEn.UserStr))
        {
            <th>Update</th>
            <th>Remove</th>
        }
    </tr>

   
    @foreach (var item in Model)
    {
        <tr>

            <td>
                @Html.DisplayFor(modelItem => item.title)
            </td>
            <td>
                @Html.Raw(item.content)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.views)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.rating)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.link)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.timestamp)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.user.name)
            </td>
            <td>
                @item.user.user_type.type
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.article_type.category)
            </td>


            @if (User.IsInRole(BOL.userTypesEn.ChiefEditorStr) || User.IsInRole(BOL.userTypesEn.EditorStr))
            {
                <td>@Html.ActionLink("Edit", "Edit", new { id = item.id })</td>
                <td>@Html.ActionLink("Delete", "Delete", new { id = item.id })</td>
            }
            <td>@Html.ActionLink("Details", "Details", new { id = item.id }) </td>

            @if (User.IsInRole(BOL.userTypesEn.UserStr) && item.category == 3)
            {
                <td>@Html.ActionLink("Edit", "Edit", new { id = item.id })</td>
                <td>@Html.ActionLink("Delete", "Delete", new { id = item.id })</td>
            }

        </tr>
    }

</table>

@*Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount*@

@*@Html.PagedListPager(Model, page => Url.Action("Index",
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))*@
